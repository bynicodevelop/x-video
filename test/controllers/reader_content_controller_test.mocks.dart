// Mocks generated by Mockito 5.4.4 from annotations
// in x_video_ai/test/controllers/reader_content_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i6;
import 'package:html/dom.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i7;
import 'package:x_video_ai/controllers/loading_controller.dart' as _i5;
import 'package:x_video_ai/services/parse_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocument_0 extends _i1.SmartFake implements _i2.Document {
  _FakeDocument_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ParseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseService extends _i1.Mock implements _i3.ParseService {
  MockParseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, String>> parseUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #parseUrl,
          [url],
        ),
        returnValue: _i4.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i4.Future<Map<String, String>>);

  @override
  _i4.Future<_i2.Document> getDocument(String? url) => (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [url],
        ),
        returnValue: _i4.Future<_i2.Document>.value(_FakeDocument_0(
          this,
          Invocation.method(
            #getDocument,
            [url],
          ),
        )),
      ) as _i4.Future<_i2.Document>);
}

/// A class which mocks [LoadingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingController extends _i1.Mock implements _i5.LoadingController {
  MockLoadingController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i6.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<Map<String, bool>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<Map<String, bool>>.empty(),
      ) as _i4.Stream<Map<String, bool>>);

  @override
  Map<String, bool> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  set state(Map<String, bool>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, bool> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isLoading(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isLoading,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  void startLoading(String? key) => super.noSuchMethod(
        Invocation.method(
          #startLoading,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLoading(String? key) => super.noSuchMethod(
        Invocation.method(
          #stopLoading,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    Map<String, bool>? old,
    Map<String, bool>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.RemoveListener addListener(
    _i7.Listener<Map<String, bool>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i6.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
