// Mocks generated by Mockito 5.4.4 from annotations
// in x_video_ai/test/elements/images/box_image_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i8;

import 'package:cross_file/cross_file.dart' as _i7;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i11;
import 'package:x_video_ai/controllers/content_controller.dart' as _i9;
import 'package:x_video_ai/models/content_model.dart' as _i4;
import 'package:x_video_ai/models/video_information.dart' as _i3;
import 'package:x_video_ai/models/video_model.dart' as _i2;
import 'package:x_video_ai/services/video_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoDataModel_0 extends _i1.SmartFake
    implements _i2.VideoDataModel {
  _FakeVideoDataModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoInformation_1 extends _i1.SmartFake
    implements _i3.VideoInformation {
  _FakeVideoInformation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContentModel_2 extends _i1.SmartFake implements _i4.ContentModel {
  _FakeContentModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VideoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoService extends _i1.Mock implements _i5.VideoService {
  MockVideoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.VideoDataModel> uploadToTmpFolder(
    _i2.VideoDataModel? videoDataModel,
    String? projectPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadToTmpFolder,
          [
            videoDataModel,
            projectPath,
          ],
        ),
        returnValue: _i6.Future<_i2.VideoDataModel>.value(_FakeVideoDataModel_0(
          this,
          Invocation.method(
            #uploadToTmpFolder,
            [
              videoDataModel,
              projectPath,
            ],
          ),
        )),
      ) as _i6.Future<_i2.VideoDataModel>);

  @override
  _i6.Future<_i3.VideoInformation> getInformation(_i7.XFile? video) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformation,
          [video],
        ),
        returnValue:
            _i6.Future<_i3.VideoInformation>.value(_FakeVideoInformation_1(
          this,
          Invocation.method(
            #getInformation,
            [video],
          ),
        )),
      ) as _i6.Future<_i3.VideoInformation>);

  @override
  _i6.Future<_i2.VideoDataModel> standardizeVideo(
    _i2.VideoDataModel? videoDataModel,
    String? projectPath, {
    String? format = r'1920:1080',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #standardizeVideo,
          [
            videoDataModel,
            projectPath,
          ],
          {#format: format},
        ),
        returnValue: _i6.Future<_i2.VideoDataModel>.value(_FakeVideoDataModel_0(
          this,
          Invocation.method(
            #standardizeVideo,
            [
              videoDataModel,
              projectPath,
            ],
            {#format: format},
          ),
        )),
      ) as _i6.Future<_i2.VideoDataModel>);

  @override
  _i6.Future<_i8.Uint8List?> generateThumbnail({
    required _i7.XFile? file,
    required String? outputPath,
    String? fileName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateThumbnail,
          [],
          {
            #file: file,
            #outputPath: outputPath,
            #fileName: fileName,
          },
        ),
        returnValue: _i6.Future<_i8.Uint8List?>.value(),
      ) as _i6.Future<_i8.Uint8List?>);
}

/// A class which mocks [ContentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentController extends _i1.Mock implements _i9.ContentController {
  MockContentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isReadyVideo => (super.noSuchMethod(
        Invocation.getter(#isReadyVideo),
        returnValue: false,
      ) as bool);

  @override
  bool get hasChronical => (super.noSuchMethod(
        Invocation.getter(#hasChronical),
        returnValue: false,
      ) as bool);

  @override
  _i4.ContentModel get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: _FakeContentModel_2(
          this,
          Invocation.getter(#content),
        ),
      ) as _i4.ContentModel);

  @override
  set onError(_i10.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<_i4.ContentModel> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.ContentModel>.empty(),
      ) as _i6.Stream<_i4.ContentModel>);

  @override
  _i4.ContentModel get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeContentModel_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ContentModel);

  @override
  set state(_i4.ContentModel? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ContentModel get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeContentModel_2(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i4.ContentModel);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void initContent(_i4.ContentModel? contentModel) => super.noSuchMethod(
        Invocation.method(
          #initContent,
          [contentModel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setContent(
    String? title,
    String? content,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setContent,
          [
            title,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setChronical(String? content) => super.noSuchMethod(
        Invocation.method(
          #setChronical,
          [content],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAudio(String? audio) => super.noSuchMethod(
        Invocation.method(
          #setAudio,
          [audio],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSrt(Map<String, dynamic>? srt) => super.noSuchMethod(
        Invocation.method(
          #setSrt,
          [srt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSrtWithGroup(List<Map<String, dynamic>>? srtWithGroup) =>
      super.noSuchMethod(
        Invocation.method(
          #setSrtWithGroup,
          [srtWithGroup],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAss(String? assContent) => super.noSuchMethod(
        Invocation.method(
          #setAss,
          [assContent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSections(List<Map<String, dynamic>>? sections) => super.noSuchMethod(
        Invocation.method(
          #setSections,
          [sections],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSections(Map<String, dynamic>? section) => super.noSuchMethod(
        Invocation.method(
          #updateSections,
          [section],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void save() => super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i4.ContentModel? old,
    _i4.ContentModel? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i10.RemoveListener addListener(
    _i11.Listener<_i4.ContentModel>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i10.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
