// Mocks generated by Mockito 5.4.4 from annotations
// in x_video_ai/test/services/section_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:io' as _i3;

import 'package:dart_openai/dart_openai.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:x_video_ai/gateway/open_ai_gateway.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_1 extends _i1.SmartFake implements _i3.File {
  _FakeFile_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenAIGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenAIGateway<T> extends _i1.Mock implements _i4.OpenAIGateway<T> {
  MockOpenAIGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<T> callOpenAI({
    required List<_i5.OpenAIChatCompletionChoiceMessageModel>? messages,
    String? model = r'gpt-4o',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #callOpenAI,
          [],
          {
            #messages: messages,
            #model: model,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #callOpenAI,
                  [],
                  {
                    #messages: messages,
                    #model: model,
                  },
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #callOpenAI,
                [],
                {
                  #messages: messages,
                  #model: model,
                },
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<_i3.File> convertTextToSpeech({
    required String? model,
    required String? input,
    required String? voice,
    required _i3.Directory? outputDirectory,
    String? outputFileName = r'audio',
    _i5.OpenAIAudioSpeechResponseFormat? responseFormat,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertTextToSpeech,
          [],
          {
            #model: model,
            #input: input,
            #voice: voice,
            #outputDirectory: outputDirectory,
            #outputFileName: outputFileName,
            #responseFormat: responseFormat,
          },
        ),
        returnValue: _i2.Future<_i3.File>.value(_FakeFile_1(
          this,
          Invocation.method(
            #convertTextToSpeech,
            [],
            {
              #model: model,
              #input: input,
              #voice: voice,
              #outputDirectory: outputDirectory,
              #outputFileName: outputFileName,
              #responseFormat: responseFormat,
            },
          ),
        )),
      ) as _i2.Future<_i3.File>);

  @override
  _i2.Future<Map<String, dynamic>> transcribeAudioToText(
          {required String? pathFile}) =>
      (super.noSuchMethod(
        Invocation.method(
          #transcribeAudioToText,
          [],
          {#pathFile: pathFile},
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
}
