// Mocks generated by Mockito 5.4.4 from annotations
// in x_video_ai/test/services/video_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:x_video_ai/gateway/ffmpeg.dart' as _i4;
import 'package:x_video_ai/gateway/file_getaway.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileWrapper_0 extends _i1.SmartFake implements _i2.FileWrapper {
  _FakeFileWrapper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectoryWrapper_1 extends _i1.SmartFake
    implements _i2.DirectoryWrapper {
  _FakeDirectoryWrapper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileGateway extends _i1.Mock implements _i2.FileGateway {
  MockFileGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FileWrapper getFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getFile,
          [path],
        ),
        returnValue: _FakeFileWrapper_0(
          this,
          Invocation.method(
            #getFile,
            [path],
          ),
        ),
      ) as _i2.FileWrapper);

  @override
  bool exists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [path],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> createDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i2.DirectoryWrapper getDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getDirectory,
          [path],
        ),
        returnValue: _FakeDirectoryWrapper_1(
          this,
          Invocation.method(
            #getDirectory,
            [path],
          ),
        ),
      ) as _i2.DirectoryWrapper);
}

/// A class which mocks [FFMpeg].
///
/// See the documentation for Mockito's code generation for more information.
class MockFFMpeg extends _i1.Mock implements _i4.FFMpeg {
  MockFFMpeg() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> processVideo({
    required String? inputPath,
    required String? outputPath,
    required String? format,
    bool? sound = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #processVideo,
          [],
          {
            #inputPath: inputPath,
            #outputPath: outputPath,
            #format: format,
            #sound: sound,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i5.Uint8List?> generateThumbnail({
    required String? outputPath,
    required String? inputFile,
    String? filename = r'thumbnail',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateThumbnail,
          [],
          {
            #outputPath: outputPath,
            #inputFile: inputFile,
            #filename: filename,
          },
        ),
        returnValue: _i3.Future<_i5.Uint8List?>.value(),
      ) as _i3.Future<_i5.Uint8List?>);

  @override
  _i3.Future<Map<String, dynamic>> getVideoInformation(String? inputPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoInformation,
          [inputPath],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> cutSegment(
    String? inputPath,
    String? outputPath,
    double? duration,
    String? format,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cutSegment,
          [
            inputPath,
            outputPath,
            duration,
            format,
            onProgress,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> concat(
    List<String>? tempFiles,
    String? tempDir,
    String? outputVideoPath,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #concat,
          [
            tempFiles,
            tempDir,
            outputVideoPath,
            onProgress,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addAudioToVideo(
    String? videoPath,
    String? audioPath,
    String? outputVideoPath,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAudioToVideo,
          [
            videoPath,
            audioPath,
            outputVideoPath,
            onProgress,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addSubtitlesToVideo(
    String? videoPath,
    String? subtitlesContent,
    String? outputVideoPath,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSubtitlesToVideo,
          [
            videoPath,
            subtitlesContent,
            outputVideoPath,
            onProgress,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
